apiVersion: v1
kind: Template
labels:
  template: f8a-server-backbone
metadata:
  name: f8a-server-backbone
  annotations:
    description: f8a-server-backbone
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: f8a-server-backbone
    name: f8a-server-backbone
  spec:
    replicas: "${{REPLICAS}}"
    selector:
      service: f8a-server-backbone
    template:
      metadata:
        labels:
          service: f8a-server-backbone
      spec:
        containers:
        - command:
          - /bin/entrypoint.sh
          env:
          - name: GREMLIN_URL
            value: "http://bayesian-gremlin-http:8182"
          - name: DEPLOYMENT_PREFIX
            valueFrom:
              configMapKeyRef:
                name: bayesian-config
                key: deployment-prefix
          - name: WORKER_ADMINISTRATION_REGION
            value: "api"
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                name: worker
                key: sentry_dsn
          - name: PGBOUNCER_SERVICE_HOST
            value: bayesian-pgbouncer
          - name: PGBOUNCER_SERVICE_PORT
            value: "5432"
          - name: LICENSE_ANALYSIS_BASE_URL
            value: "http://f8a-license-analysis:6162"
          - name: NPM_INSIGHTS_BASE_URL
            value: "http://f8a-npm-insights:6006"
          - name: PYPI_INSIGHTS_BASE_URL
            value: "http://f8a-pypi-insights:6006"
          - name: MAVEN_INSIGHTS_BASE_URL
            value: "http://f8a-hpf-insights-maven:6006"
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: coreapi-postgres
                key: database
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: coreapi-postgres
                key: password
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: coreapi-postgres
                key: username
          - name: AWS_SQS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: aws-sqs
                key: aws_access_key_id
          - name: AWS_SQS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: aws-sqs
                key: aws_secret_access_key
          - name: API_BACKBONE_SERVICE_PORT
            value: "5000"
          - name: WORKER_TIMEOUT
            value: ${WORKER_TIMEOUT}
          - name: WORKER_CONNECTIONS
            value: "1024"
          - name: WORKER_CLASS
            value: "gevent"
          - name: WORKER_COUNT
            value: "4"
          - name: FLASK_LOGGING_LEVEL
            value: ${FLASK_LOGGING_LEVEL}
          - name: METRICS_ENDPOINT_URL
            value: "metrics-accumulator"
          - name: METRICS_ENDPOINT_URL_PORT
            value: "5200"

          image: "${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}"
          name: f8a-server-backbone
          ports:
          - containerPort: ${{API_BACKBONE_SERVICE_PORT}}
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /api/liveness
              port: ${{API_BACKBONE_SERVICE_PORT}}
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /api/readiness
              port: ${{API_BACKBONE_SERVICE_PORT}}
          resources:
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      service: f8a-server-backbone
    name: f8a-server-backbone
  spec:
    ports:
    - port: ${{API_BACKBONE_SERVICE_PORT}}
      name: "${API_BACKBONE_SERVICE_PORT}"
      targetPort: ${{API_BACKBONE_SERVICE_PORT}}
      protocol: TCP
    selector:
      service: f8a-server-backbone
- apiVersion: v1
  kind: Route
  metadata:
    name: f8a-server-backbone
  spec:
    host: ${BACKBONE_API_HOSTNAME}
    to:
      kind: Service
      name: f8a-server-backbone

parameters:
- description: A hostname where the Bayesian API should be exposed (will be auto-generated if empty)
  displayName: Bayesian API hostname
  required: false
  name: BACKBONE_API_HOSTNAME

- description: CPU request
  displayName: CPU request
  required: true
  name: CPU_REQUEST
  value: "128m"

- description: CPU limit
  displayName: CPU limit
  required: true
  name: CPU_LIMIT
  value: "500m"

- description: Memory request
  displayName: Memory request
  required: true
  name: MEMORY_REQUEST
  value: "512Mi"

- description: Memory limit
  displayName: Memory limit
  required: true
  name: MEMORY_LIMIT
  value: "512Mi"

- description: Docker registry where the image is
  displayName: Docker registry
  required: true
  name: DOCKER_REGISTRY
  value: "quay.io"

- description: Docker image to use
  displayName: Docker image
  required: true
  name: DOCKER_IMAGE
  value: "openshiftio/fabric8-analytics-f8a-server-backbone"

- description: Image tag
  displayName: Image tag
  required: true
  name: IMAGE_TAG
  value: "latest"

- description: Number of deployment replicas
  displayName: Number of deployment replicas
  required: true
  name: REPLICAS
  value: "1"

- description: Port Number
  displayName: Port Number
  required: true
  name: API_BACKBONE_SERVICE_PORT
  value: "5000"

- description: Worker Timeout
  displayName: Worker Timeout
  required: true
  name: WORKER_TIMEOUT
  value: "120"

- description: "Flask logging level (see: https://docs.python.org/3/library/logging.html#levels)"
  displayName: Flask logging level
  required: false
  name: FLASK_LOGGING_LEVEL
  value: "INFO"
